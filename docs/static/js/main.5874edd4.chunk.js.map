{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","GifGridItem","className","src","alt","GifGrid","key","GitExpertApp","categories","ReactDOM","render","StrictMode","GifExpertApp","document","getElementById"],"mappings":"oNAyBeA,EAtBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAe1C,OACC,0BAAMC,SATc,SAACC,GACrBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdd,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,Y,uBCSVG,EAhBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACTC,EADS,iDACuCC,UACrDH,GAFc,+DAIGI,MAAMF,GAJT,cAITG,EAJS,gBAKQA,EAAIC,OALZ,uBAKPC,EALO,EAKPA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACtB,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVpB,kBAaRM,GAbQ,4CAAH,sDCqBEO,EAlBM,SAACf,GAAc,IAAD,EACRd,mBAAS,CAClCqB,KAAM,GACNS,SAAS,IAHwB,mBAC3BC,EAD2B,KACpBC,EADoB,KAelC,OATAC,qBAAU,WACTpB,EAAQC,GAAUoB,MAAK,SAACV,GACvBQ,EAAS,CACRX,KAAMG,EACNM,SAAS,SAGT,CAAChB,IAEGiB,GCNOI,G,KATK,SAAC,GAAuB,EAArBV,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACC,yBAAKoB,UAAU,0CACd,yBAAKC,IAAKrB,EAAKsB,IAAKZ,IACpB,2BAAIA,MCeQa,EAlBC,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SAAe,EACCe,EAAaf,GAAjCa,EADmB,EACzBN,KAAcS,EADW,EACXA,QAEtB,OACC,oCACC,4BAAKhB,GAEJgB,GAAW,yCAEZ,yBAAKM,UAAU,aACbT,EAAOJ,KAAI,SAACC,GAAD,OACX,kBAAC,EAAD,eAAagB,IAAKhB,EAAIC,IAAQD,UCWpBiB,EAtBM,WAAO,IAAD,EACUzC,mBAAS,CAAC,KADpB,mBACnB0C,EADmB,KACP3C,EADO,KAQ1B,OACC,oCACC,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACE2C,EAAWnB,KAAI,SAACT,GAAD,OACf,kBAAC,EAAD,CAAS0B,IAAK1B,EAAUA,SAAUA,UCdvC6B,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAACC,EAAD,OAEDC,SAASC,eAAe,U","file":"static/js/main.5874edd4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\tconst [inputValue, setInputValue] = useState('');\n\n\tconst handleInputChange = (e) => {\n\t\tsetInputValue(e.target.value);\n\t};\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tif (inputValue.trim().length > 2) {\n\t\t\tsetCategories((cats) => [inputValue, ...cats]);\n\t\t\tsetInputValue('');\n\t\t}\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input type=\"text\" value={inputValue} onChange={handleInputChange} />\n\t\t</form>\n\t);\n};\n\nexport default AddCategory;\n\nAddCategory.propTypes = {\n\tsetCategories: PropTypes.func.isRequired,\n};\n","const getGifs = async (category) => {\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n\t\tcategory\n\t)}&limit=10&api_key=nmueKSiAlR5TjGzx2iNMSiCKsp5jyyEi`;\n\tconst res = await fetch(url);\n\tconst { data } = await res.json();\n\tconst gifs = data.map((img) => {\n\t\treturn {\n\t\t\tid: img.id,\n\t\t\ttitle: img.title,\n\t\t\turl: img.images.downsized_medium.url,\n\t\t};\n\t});\n\treturn gifs;\n};\n\nexport default getGifs;\n","import { useState, useEffect } from 'react';\nimport getGifs from '../helpers/getGifs';\n\nconst useFetchGifs = (category) => {\n\tconst [state, setState] = useState({\n\t\tdata: [],\n\t\tloading: true,\n\t});\n\n\tuseEffect(() => {\n\t\tgetGifs(category).then((img) => {\n\t\t\tsetState({\n\t\t\t\tdata: img,\n\t\t\t\tloading: false,\n\t\t\t});\n\t\t});\n\t}, [category]);\n\n\treturn state;\n};\n\nexport default useFetchGifs;\n","import React from 'react';\nimport '../index.css';\n\nconst GifGridItem = ({ id, title, url }) => {\n\treturn (\n\t\t<div className=\"card animate__animated animate__bounce\">\n\t\t\t<img src={url} alt={title} />\n\t\t\t<p>{title}</p>\n\t\t</div>\n\t);\n};\n\nexport default GifGridItem;\n","import React /* , { useState, useEffect } */ from 'react';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\tconst { data: images, loading } = useFetchGifs(category);\n\n\treturn (\n\t\t<>\n\t\t\t<h3>{category}</h3>\n\n\t\t\t{loading && <p>Loading...</p>}\n\n\t\t\t<div className=\"card-grid\">\n\t\t\t\t{images.map((img) => (\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default GifGrid;\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GitExpertApp = () => {\n\tconst [categories, setCategories] = useState(['']);\n\n\t/* const handleAdd = () => {\n\t\t//setCategories([...categories, 'Dragon Ball']); // 1ra. Forma\n\t\tsetCategories((cats) => [...categories, 'Dragon Ball']); // 2da. Forma\n\t}; */\n\n\treturn (\n\t\t<>\n\t\t\t<h2>GifExpertApp</h2>\n\t\t\t<AddCategory setCategories={setCategories} />\n\t\t\t<hr />\n\t\t\t<ol>\n\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t<GifGrid key={category} category={category} />\n\t\t\t\t))}\n\t\t\t</ol>\n\t\t</>\n\t);\n};\n\nexport default GitExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<GifExpertApp />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}